package Array;

/**
 * @Description:1. java语言中的数组是一种引用数据类型，不属于基本数据类型，数组的父类是Object类。
 *              2. 数组实际上是一个容器，可以同时容纳多个元素。（数组是一个数据的集合）
 *                   * 数组：字面意思是“一组数据”。
 *              3. 数组当中可以存储“基本数据类型”的数据，也可以存储“引用数据类型“的数据。
 *              4. 数组因为是引用类型，所以数组对象是堆内存当中。（数组是存储在堆内存当中的）
 *              5. 数组当中如果存储的是“java对象”的话，实际上存储的是对象的”引用（内存地址）”，数组中不能直接存储java对象。
 *              6. 数组一旦创建，在java中规定，长度不可变。
 *              7. 数组的分类：一维数组、二维数组、三维数组、多维数组...（一维数组较多，二维数组偶尔使用！）
 *              8. 所有数组对象都有length属性(java自带)，用来获取数组中元素的个数。
 *              9. java中的数组要求数组中元素的类型统一。比如int类型数组只能存储int类型，Person类型数组只能存储Person类型。
 *                  * 例如：超市购物，购物袋中只能装苹果，不能同时装苹果和橘子。
 *              10.数组在内存方面存储的时候，数组中的元素内存地址(存储的每一个元素都是有规则的挨着排列的)是连续的，内存地址连续。
 *                 这是数组存储元素的特点(特色)，数组实际上是一种简单的数据结构。
 *              11.所有的数组都是拿“第一个小方框的内存地址“作为整个数组对象的内存地址。
 *                  * （数组中首元素的内存地址作为整个数组对象的内存地址。）
 *              12.数组中每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是：length - 1
 *                  * 下标非常重要，因为我们对数组中元素进行“存取”的时候，都需要通过下标来进行。
 *              13.数组这种数据结构的优点和缺点：
 *                  * 优点：查询/查找/检索某个下标上的元素时效率极高，可以说查询效率最高的一个数据结构。
 *                  * 第一：每一个元素的内存地址在空间存储上时连续的。
 *                      * 第二：每一个元素类型相同，所以占用空间大小一样。
 *                      * 第三：知道每一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，所以通过一个数学表达式
 *                          就可以计算出某个下标元素的内存地址，直接通过内存地址定位元素，所以数组的检索效率是最高的。
 *                      * 数组中元素查找的时候不会一个一个找，是通过数学表达式计算出来的。（算出一个内存地址，直接定位）
 *                  * 缺点：
 *                      * 第一：由于为了保证数组中的每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候，效率
 *                      较低，因为随机赠删元素会涉及到后面元素统一向前或者向后位移的操作。
 *                      * 第二：数组不能存储大数据量，因为很难在内存空间上找到一块特别大的连续的内存空间。
 *              14.声明/定义一个一维数组：
 *                  * 语法格式：
 *                      * int[] array1;
 *                      * Double[] array2;
 *                      * boolean[] array3;
 *                      * String[] array4;
 *                      * Object[] array5;
 *              15. 初始化一个数组：
 *                  * 包括两种方式：静态初始化一维数组、动态初始化一维数组。
 *                      * 静态初始化语法格式：
 *                      * int[] array = (100,2002,300,500);
 *                      * 动态初始化语法格式：
 *                      * int[] array = new int[5]; //这里的5表示数组的元素个数，初始化一个5个长度的int类型数组，每个默认元素值是0。
 *                      * String[] names = new String[6];//初始化6个长度的String类型数组，每个默认值元素是null。
 *
 * @User:李丰豪
 * @Date:2022年4月5日
 */

//静态初始化方式
public class ArrayTest01 {
    public static void main(String[] args) {
        //C++风格,不建议java中使用
        int a1[] = {1,100,10,20,55,689};

        //java方式,声明一个int类型的数组，使用静态初始化的方式
        int[] a = {1,100,10,20,55,689};

        //所有数组对象都有length属性
        System.out.println("数组中元素的个数是" + a.length);

        //数组中每一个元素都有下标
        //通过下标对数组中的元素进行存和取
        //取（读）
        System.out.println("第一个元素 = " + a[0]);
        System.out.println("最后一个元素 = " + a[a.length-1]);

        //存（改）
        //把第一个元素修改为111
        a[0] = 111;
        //把最后一个元素修改为0
        a[a.length-1] = 0;

        //一维数组怎么遍历呢？
        for (int i = 0;i < a.length;i++){
            System.out.println(a[i]);//i是从0到5，是下标。
        }
        //下标为6表示第7个元素，第7个元素没有，下标越界，出现数组下标越界异常
        //System.out.println(a[6]);//ArrayIndexOutOfBoundsException (比较著名的异常)

        //从最后一个元素遍历到第1个元素
        for (int i = a.length - 1;i >= 0;i--){
            System.out.println("颠倒顺序输出-->" + a[i]);
        }
    }
}
